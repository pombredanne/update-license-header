#!/usr/bin/python
#
# update-header - Updates the header comment in source files
# Copyright (C) 2013  Lorenzo Villani
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

from argparse import ArgumentParser
from functools import partial
from os import chmod, stat
from os.path import isdir, isfile, join, splitext, walk
from shutil import copyfile
from tempfile import NamedTemporaryFile

from updateheader import update_header


# File extension -> comment string
COMMENT_STRING = {
    ".c":     "//",
    ".cc":    "//",
    ".cpp":   "//",
    ".el":    ";;;;",
    ".h":     "//",
    ".hh":    "//",
    ".hpp":   "//",
    ".hs":    "--",
    ".java":  "//",
    ".js":    "//",
    ".li":    ";;;;",
    ".m":     "//",
    ".mm":    "//",
    ".py":    "#",
    ".swift": "//",
    ".yml":   "#",
}


def main():
    # Parse command line
    arg_parser = ArgumentParser()
    arg_parser.add_argument("-c", "--comment-string", default="#")
    arg_parser.add_argument("header", nargs=1)
    arg_parser.add_argument("path", nargs="+")

    args = arg_parser.parse_args()

    # Input stream for the header boilerplate
    header = open(args.header[0], "r")

    # Process files and directories
    for path in args.path:
        if isfile(path):
            update_file(path, header, args.comment_string)
        elif isdir(path):
            update_directory(path, header, args.comment_string)


def update_file(path, header, comment_string):
    """
    Updates the header boilerplate for a single file.

    :param path: A file path.
    """
    original_stat = stat(path)
    input_stream = open(path, "r")
    tempfile = NamedTemporaryFile(mode="w")

    update_header(input_stream, header, tempfile, comment_string)
    tempfile.flush()

    copyfile(tempfile.name, path)
    chmod(path, original_stat.st_mode)


def update_directory(path, header, comment_string):
    """
    Recursively updates the header boilerplate for all recognized files below
    the specified directory.

    :param path: A directory path.
    """
    def is_recognized(entry):
        return isfile(entry) and splitext(entry)[1] in COMMENT_STRING

    def visit(_, directory, files):
        entries = map(partial(join, directory), files)
        applicable = filter(is_recognized, entries)

        for path in applicable:
            ext = splitext(path)[1]

            update_file(path, header, COMMENT_STRING[ext])

    walk(path, visit, None)


if __name__ == "__main__":
    main()
